"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Functions

" Rename current file
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction

" Better navigating through omnicomplete option list
" See http://stackoverflow.com/questions/2170023/how-to-map-keys-for-popup-menu-in-vim
function! OmniPopup(action)
    if pumvisible()
        if a:action == 'j'
            return "\<C-N>"
        elseif a:action == 'k'
            return "\<C-P>"
        endif
    endif
    return a:action
endfunction

" Toggle both NERDTree and Tagbar
function! ToggleNERDTreeAndTagbar()
    let w:jumpbacktohere = 1

    " Detect which plugins are open
    if exists('t:NERDTreeBufName')
        let nerdtree_open = bufwinnr(t:NERDTreeBufName) != -1
    else
        let nerdtree_open = 0
    endif
    let tagbar_open = bufwinnr('__Tagbar__') != -1

    " Perform the appropriate action
    if nerdtree_open && tagbar_open
        NERDTreeClose
        TagbarClose
    elseif nerdtree_open
        TagbarOpen
    elseif tagbar_open
        NERDTree
    else
        NERDTree
        TagbarOpen
    endif

    " Jump back to the original window
    for window in range(1, winnr('$'))
        execute window . 'wincmd w'
        if exists('w:jumpbacktohere')
            unlet w:jumpbacktohere
            break
        endif
    endfor
endfunction

" Close all open buffers on entering a window if the only
" buffer that's left is the NERDTree buffer
function! s:CloseIfOnlyNerdTreeLeft()
  if exists("t:NERDTreeBufName")
    if bufwinnr(t:NERDTreeBufName) != -1
      if winnr("$") == 1
        q
      endif
    endif
  endif
endfunction

function! NumberToggle()
  if(&relativenumber == 1)
    set number
  else
    set relativenumber
  endif
endfunc

" End Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set nocompatible
set encoding=utf-8
set mouse=a

" Apply substitutions globally on lines
set gdefault

" Fix vim's regex so I can use pcre
" nnoremap / /\v
" vnoremap / /\v

" Allow vim clipboard to pass thru to OS X
" set clipboard=unnamed

" make backspace behave like normal again
set bs=2

" Pathogen
" Use pathogen to easily modify the runtime path to include all
" plugins under the ~/.vim/bundle directory
call pathogen#helptags()
call pathogen#runtime_append_all_bundles()

" Enable syntax highlighting
filetype off
syntax on
syntax enable
filetype plugin indent on

" change the mapleader from \ to ,
let mapleader=","

" show problematic whitespace
set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace

" Show whitespace
" MUST be inserted BEFORE the colorscheme command
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red

" Mustang via https://github.com/croaker/mustang-vim
" colorscheme mustang
colorscheme mustang
set t_Co=256

" Setup our default font
" set guifont=Monaco:h12
set guifont=Bitstream\ Vera\ Sans\ Mono:h12

if has("gui_running")
    " MacVim in fullscreen mode rocks
    " set fullscreen

    " Let's not go fullscreen for a while
    set lines=55
    set columns=120

    " remove toolbar
    set guioptions-=T
    " remove left scrollbar (in NERDTree)
    set guioptions-=L
    " remove right scrollbar
    set guioptions-=r
    " switch tabs with Command-j
    map <D-j> gT
    map <D-k> gt
endif

map <leader>j gT
map <leader>k gt

" Convert tabs to spaces
set softtabstop=4
set tabstop=4
set shiftwidth=4
set expandtab

" Showing line numbers and length
set number
set relativenumber  " show relative line numbers
" set tw=80   " width of document (used by gd)
" set wrap    " automatically wrap on load
" set fo+=t   " automatically wrap text when typing
set fo-=t   " don't automatically wrap text when typing

" Don't create swap files
set noswapfile

" add a cursorline
set cursorline
hi CursorLine term=bold cterm=bold guibg=Grey20

" Show 80 char column
" set colorcolumn=80
" highlight ColorColumn ctermbg=233

" Highlight searches
set incsearch

" Spelling toggles
nmap <leader>ss :set spell!<CR>

" easier formatting of paragraphs
" Select (in visual mode)
vmap Q gq
nmap Q gqap

" Quicksave command
noremap <leader>s :update<CR>
vnoremap <leader>s <C-C>:update<CR>
inoremap <leader>s <C-O>:update<CR>

" Easier swap two characters
nnoremap <silent> gc xph

" Gundo mappings
nnoremap  <leader>h :GundoToggle<CR>

" Rename current file
map <leader>rn :call RenameFile()<cr>

" Select word with space
map <space> viw

" easier moving of code blocks
" Try to go into visual mode (v), thenselect several lines of code here and
" then press ``>`` several times.
vnoremap < <gv
vnoremap > >gv

" Easier comment/uncomment
vmap <leader># :s!^!# !<CR>
vmap <leader>u :s!^# !!<CR>

" select all
map <leader>a ggVG

" Better copy and paste
map <leader>c "+y
nmap <leader>v :set paste<CR>:r !pbpaste<CR>:set nopaste<CR>
imap <leader>v <Esc>:set paste<CR>:r !pbpaste<CR>:set nopaste<CR>

" bind Ctrl+<movement> keys to move around the windows, instead of using Ctrl+w + <movement>
" Every unnecessary keystroke that can be saved is good for your health :)
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

" Quick quit command
noremap <Leader>e :quit<CR>  " Quit current window
noremap <Leader>E :qa!<CR>   " Quit all windows

" Automatic reloading of .vimrc
autocmd! bufwritepost .vimrc source %

" Associate proper file extensions with proper filetypes
autocmd! BufRead,BufNewFile *.pp set filetype=puppet

" This beauty remembers where you were the last time you edited the file, and
" returns to the same position.
" au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

" Open a new tab
map <leader>t :tabnew<CR>

" Switch tabs shortcut
map <leader><space> gt

" Easier redo
map <leader>r <C-r>

" Execute python file being edited with <Shift> + e:
map <buffer> <S-e> :w<CR>:!/usr/bin/env python % <CR>

" Strip all whitespace in the current buffer
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" Enable/Disable relative line numbers
nnoremap <C-n> :call NumberToggle()<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ctrlp
"
" Make ctrlp's location sync with nerdtree window
let g:ctrlp_dont_split = 'nerdtree'

" Set ctrlp's working path
let g:ctrlp_working_path_mode = 'ra'

" Use tab to open new files in split windows
let g:ctrlp_prompt_mappings = {
  \ 'AcceptSelection("h")': ['<c-x>', '<c-cr>', '<c-s>', '<c-i>']
  \ }

let g:ctrlp_max_height = 10
set wildignore+=*.pyc
set wildignore+=*.so
set wildignore+=*.zip

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Powerline
"
" cd ~/.vim/bundle
" git clone git://github.com/Lokaltog/vim-powerline.git
set laststatus=2

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" python-mode
"
" map <Leader>g :call RopeGotoDefinition()<CR>
" let ropevim_enable_shortcuts = 1
" let g:pymode_rope_extended_complete = 1
" let g:pymode_rope_goto_def_newwin = "vnew"
" let g:pymode_syntax = 1
" let g:pymode_syntax_builtin_objs = 0
" let g:pymode_syntax_builtin_funcs = 0
" let g:pymode_folding = 0

" Enabled breakpoint plugin
let g:pymode_breakpoint = 0
map <leader>b Oimport ipdb; ipdb.set_trace() # BREAKPOINT<C-c>

" Disable pylint checking every save
let g:pymode_lint_write = 0
" Map <leader>p to PyLink syntax check
map <leader>p :PyLint<CR>
" Renam find occurences
map <leader>f <C-c>f<CR>

" Remap j,k to select options in popup lists
inoremap <silent>j <C-R>=OmniPopup('j')<CR>
inoremap <silent>k <C-R>=OmniPopup('k')<CR>

" Python folding
" mkdir -p ~/.vim/ftplugin
" wget -O ~/.vim/ftplugin/python_editing.vim http://www.vim.org/scripts/download_script.php?src_id=5492
set nofoldenable

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tagbar
"
" To install requirements:
" brew install ctags-exuberant

" Map our Tagbar toggle
map <leader>T :TagbarToggle<CR>

" Toggle both NERDTree and Tagbar with <leader>\
nnoremap <leader>m :call ToggleNERDTreeAndTagbar()<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Jedi

let g:jedi#documentation_command = "K"
let g:jedi#auto_initialization = 1
let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_definitions_command = "<leader>d"
let g:jedi#usages_command= "<leader>N"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NERDTree
"

if has("gui_running")
  " Only enable NERDTree on all files in MacVim
  " autocmd VimEnter * NERDTree
  " autocmd VimEnter * wincmd p
  " autocmd VimEnter * :call ToggleNERDTreeAndTagbar()

  " Enable NERDTree window on all tabs
  " autocmd BufEnter * NERDTreeMirror
endif

" Set the side bar size
let g:NERDTreeWinSize = 40

" Ignore *.pyc files
let NERDTreeIgnore = ['\.pyc$']

" Toggle NERDTree with Leader-n
map <leader>n :NERDTreeToggle<CR>

" Close NERDTree if its the only buffer left
autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Fugitive
"
" To make current branch appear in powerline, run:
" :PowerlineClearCache
" then restart vim.

map <leader>S :Gstatus<CR>

" Write COMMIT_EDITMSG and push to current branch
function! PushToCurrentBranch()
  exe ":Gwrite"
  let branch = fugitive#statusline()
  let branch = substitute(branch, '\c\v\[?GIT\(([a-z0-9\-_\./:]+)\)\]?', $BRANCH.' \1', 'g')
  exe ":Git push origin" . branch
endfunction

" Map gwp keys to call the function
nnoremap gwp :call PushToCurrentBranch()<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SuperTab
"
" cd ~/.vim && git clone https://github.com/ervandew/supertab.git

" let g:SuperTabNoCompleteAfter = ['^', '\s', ',', '(', ')', '[', ']', '{', '}', '<', '>', '''', '"']

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-gitgutter

" Fix gutter coloring issue
highlight clear SignColumn

" remove that annoying scratch window
set completeopt-=preview
" for some reason the above isn't working when in .vimrc, but works manually
autocmd FileType * setlocal completeopt-=preview

let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>

