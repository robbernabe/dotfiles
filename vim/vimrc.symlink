set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Vundle Plugins
Plugin 'ervandew/supertab'
Plugin 'kien/ctrlp.vim'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-endwise'
Plugin 'vim-ruby/vim-ruby'
Plugin 'airblade/vim-gitgutter'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'Townk/vim-autoclose'
Plugin 'scrooloose/nerdtree'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'jeetsukumaran/vim-buffergator'
Plugin 'rking/ag.vim.git'
Plugin 'w0rp/ale'
Plugin 'benmills/vimux'
Plugin 't9md/vim-chef'

" Vundle colorschemes
Plugin 'sjl/badwolf'
Plugin 'chriskempson/vim-tomorrow-theme'
Plugin 'nanotech/jellybeans.vim'
Plugin 'cocopon/iceberg.vim'
Plugin 'gilgigilgil/anderson.vim.git'
Plugin 'altercation/vim-colors-solarized.git'
Plugin 'croaker/mustang-vim.git'
Plugin 'vim-scripts/xoria256.vim.git'
Plugin 'dracula/vim'
Plugin 'morhetz/gruvbox'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Functions
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Close all open buffers on entering a window if the only
" buffer that's left is the NERDTree buffer
function! s:CloseIfOnlyNerdTreeLeft()
  if exists("t:NERDTreeBufName")
    if bufwinnr(t:NERDTreeBufName) != -1
      if winnr("$") == 1
        q
      endif
    endif
  endif
endfunction

" For vim-chef
function! s:SetupChef()
  " Jump into to match same as ctags
  nnoremap <buffer> <silent> <C-[>      :<C-u>ChefFindAny<CR>
  " Jump back to match same as ctags
  nnoremap <buffer> <silent> <C-t> <C-o>
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" BASIC EDITING CONFIGURATION
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let mapleader=","
set cmdheight=1

set switchbuf=useopen
set numberwidth=1
set encoding=utf-8
set mouse=a

" Fix for slow scrolling
set lazyredraw

" Convert tabs to spaces
set softtabstop=4
set tabstop=4
set shiftwidth=4
set expandtab

" Don't wrap text
set nowrap

" Filetyle specific spacing
autocmd Filetype ruby setlocal ts=2 sts=2 sw=2
autocmd Filetype javascript setlocal ts=4 sts=4 sw=4

" Quick quit command
noremap <Leader>e :quit<CR>  " Quit current window
noremap <Leader>E :qa!<CR>   " Quit all windows

" Automatic reloading of .vimrc
autocmd! bufwritepost .vimrc source %

" Apply substitutions globally on lines
set gdefault

" make backspace behave like normal again
set bs=2

" hybrid line number mode
set relativenumber
set number

" display incomplete commands
set showcmd

" Enable highlighting for syntax
syntax on

" Enable file type detection.
" Use the default filetype settings, so that mail gets 'tw' set to 72,
" 'cindent' is on in C files, etc.
" Also load indent files, to automatically do language-dependent indenting.
filetype plugin indent on

" zsh-style completion
set wildmode=full

" make tab completion for files/buffers act like bash
set wildmenu

" copy to system clipboard
set clipboard=unnamed
map <leader>c "+y

" show problematic whitespace
set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace

" Show whitespace
" MUST be inserted BEFORE the colorscheme command
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red

" Highlight searches
set incsearch

" Keep previous search highlighted
set hlsearch

" Toggle search highlighting
nnoremap <leader>h :set hlsearch!<CR>

" Select word with space
" map <space> viw

" bind Ctrl+<movement> keys to move around the windows, instead of using Ctrl+w + <movement>
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

" Better navigating through omnicomplete option list
" See http://stackoverflow.com/questions/2170023/how-to-map-keys-for-popup-menu-in-vim
" function! OmniPopup(action)
"     if pumvisible()
"         if a:action == 'j'
"             return "\<C-N>"
"         elseif a:action == 'k'
"             return "\<C-P>"
"         endif
"     endif
"     return a:action
" endfunction

" Remap j,k to select options in popup lists
"inoremap <silent>j <C-R>=OmniPopup('j')<CR>
"inoremap <silent>k <C-R>=OmniPopup('k')<CR>
inoremap <expr> <C-j> pumvisible() ? "\<C-N>" : "\<C-j>"
inoremap <expr> <C-k> pumvisible() ? "\<C-P>" : "\<C-k>"

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

" jump to the top if its a git commit message
autocmd BufReadPost COMMIT_EDITMSG
  \ exe "normal! gg"


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COLOR
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Highlight the cursorline
set cursorline

set background=dark

" Toggle dark/light backgrounds
map <F5> :let &background = ( &background == "dark"? "light" : "dark" )<CR>
colorscheme gruvbox
" colorscheme iceberg
" colorscheme jellybeans
" colorscheme Tomorrow-Night-Eighties
" colorscheme mustang
" colorscheme badwolf
" colorscheme xoria256

""""""""""""""""""""""""""""""""
" Solarized Options
""""""""""""""""""""""""""""""""
" let g:solarized_visibility = "high"
" let g:solarized_contrast = "high"
" let g:solarized_termcolors = 256
" let g:solarized_termtrans = 1
" colorscheme solarized

" Below needs to come after the colorscheme command
" highlight CursorLine ctermbg=Black
" highlight CursorLineNr term=bold ctermfg=LightGreen
" highlight LineNr ctermfg=Green ctermbg=Black
" highlight SignColumn ctermbg=Black ctermfg=Green

""""""""""""""""""""""""""""""""
" Badwolf Options
""""""""""""""""""""""""""""""""
" colorscheme badwolf
" Make the gutters darker than the background.
" let g:badwolf_darkgutter = 1
" hi CursorLine term=bold cterm=bold guibg=Grey40


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" STATUS LINE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set laststatus=2
"set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SUPERTAB
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:SuperTabNoCompleteAfter = ['^', '\s', ',', '(', ')', '[', ']', '{', '}', '<', '>', '''', '"']


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CTRLP
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ctrlp_match_window = 'bottom,order:ttb'          " order matching files from top to bottom
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'  " user silver searcher for wicked speed
let g:ctrlp_max_height = 20
let g:ctrlp_mruf_relative = 1
let g:ctrlp_working_path_mode = 'w'
command! CtrlPLine call ctrlp#init(ctrlp#line#id())
let g:ctrlp_dont_split = 'nerdtree'                    " Make ctrlp's location sync with nerdtree window
let g:ctrlp_working_path_mode = 'ra'                   " Set ctrlp's working path
let g:ctrlp_prompt_mappings = {
  \ 'AcceptSelection("h")': ['<c-x>', '<c-cr>', '<c-s>', '<c-i>']
\ }
" Setup some default ignores
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
  \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
\}
set wildignore+=*.pyc
set wildignore+=*.so
set wildignore+=*.zip


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" BUFFERGATOR
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use the right side of the screen
let g:buffergator_viewport_split_policy = 'R'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TMUX
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use vim motion keys to navigate tmux panes
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" GitGutter
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Lower the amount of time it takes to update the gutter
set updatetime=400

" Fix the gutter colors
hi clear SignColumn
" call gitgutter#highlight#define_highlights()

" Sane revert hunk
nmap <Leader>hr <Plug>GitGutterUndoHunk

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Filetypes
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd BufNewFile,BufRead Gemfile set filetype=ruby
autocmd BufNewFile,BufRead Vagrantfile set filetype=ruby
autocmd BufNewFile,BufRead Berksfile set filetype=ruby
autocmd BufNewFile,BufRead *.template set filetype=json

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NERDTree
"

if has("gui_running")
  " Only enable NERDTree on all files in MacVim
  " autocmd VimEnter * NERDTree
  " autocmd VimEnter * wincmd p
  " autocmd VimEnter * :call ToggleNERDTreeAndTagbar()

  " Enable NERDTree window on all tabs
  " autocmd BufEnter * NERDTreeMirror

  " Remove right scrollbar
  set guioptions-=r
endif

" Set the side bar size
let g:NERDTreeWinSize = 40

" Ignore *.pyc files
let NERDTreeIgnore = ['\.pyc$']

" Show hidden files
let NERDTreeShowHidden = 1

" Toggle NERDTree with Leader-n
map <leader>n :NERDTreeToggle<CR>

" Close NERDTree if its the only buffer left
autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vimux
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Prompt for a command to run
map <Leader>vp :VimuxPromptCommand<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-chef
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

au BufNewFile,BufRead */*cookbooks/* call s:SetupChef()
nnoremap <silent> <leader>R :ChefFindAny<CR>
